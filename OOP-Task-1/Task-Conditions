Условие
Съществуват няколко начина за обработване на грешки в различните езици за програмиране. Тук ще разгледаме един от тях.

Error

Даден е клас `Error`, който пази в себе си съобщение за грешка.
Optional

Даден е клас `Optional<T>`, който може да съдържа даден елемент, но може и да е празен.

Проверката дали даден `Optional` обект е празен, се извършва от метода `is_none()`

Можем да вземем стойността на `Optional` обект (дори и да е празен), чрез метода `get_value()` - ако обекта е празен, пак се очаква да върнем обект празен от тип `T` .

Един `Optional<T>` е празен, когато не му подадем аргумент в конструктора.
Result

Даден е клас `Result<T>`, който може да съдържа даден резултат, или пък грешка (от тип `Error`).

Предефинирайте оператора за сравнение (==), така че да приема `Error` или `T` и да връща дали дадения `Result` обект е грешка или не.

Напишете методи, за връщане на резултата и грешката, като използвате `Optional` (все пак, може и да нямаме резултат, или пък да нямаме грешка) .

Допълнение: Няма да се инстанцират Result<Error> и Result<std::string>
Пример за оператор== при Result:
Result<int>(3) == int() -> true
Result<int>(5) == Error() -> false
Result<int>(“Error Message”) == Error() -> true


